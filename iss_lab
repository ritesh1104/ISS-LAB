{"cells":[{"cell_type":"markdown","source":["# Known Plaintext Attack on Triple DES"],"metadata":{"id":"-HzV79o2sN56"}},{"cell_type":"code","source":["def simple_des(block, key):\n","    return bytes([b ^ k for b, k in zip(block, key)])\n","\n","def encrypt(plaintext, k1, k2, k3):\n","    step1 = simple_des(plaintext, k1)\n","    step2 = simple_des(step1, k2)\n","    step3 = simple_des(step2, k3)\n","    return step3\n","\n","def decrypt(ciphertext, k1, k2, k3):\n","    step1 = simple_des(ciphertext, k3)\n","    step2 = simple_des(step1, k2)\n","    step3 = simple_des(step2, k1)\n","    return step3\n","\n","plaintext = b'ABCDEFGH'\n","\n","keyspace = [bytes([i] * 8) for i in range(1, 5)]\n","\n","true_k1 = keyspace[0]\n","true_k2 = keyspace[1]\n","true_k3 = keyspace[2]\n","\n","ciphertext = encrypt(plaintext, true_k1, true_k2, true_k3)\n","\n","for k1 in keyspace:\n","    for k2 in keyspace:\n","        for k3 in keyspace:\n","            guessed_plaintext = decrypt(ciphertext, k1, k2, k3)\n","            if guessed_plaintext == plaintext:\n","                print(\"Key Found:\")\n","                print(f\"K1 = {k1}\")\n","                print(f\"K2 = {k2}\")\n","                print(f\"K3 = {k3}\")\n","                print(f\"Decrypted = {guessed_plaintext}\")\n","                exit()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Pndt0tMUpi-f","executionInfo":{"status":"ok","timestamp":1743997478137,"user_tz":-330,"elapsed":59,"user":{"displayName":"Ritesh Reddy","userId":"12161919313614678514"}},"outputId":"f2dc1b71-76b5-44b8-d787-895210f71089"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Key Found:\n","K1 = b'\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01'\n","K2 = b'\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02'\n","K3 = b'\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03'\n","Decrypted = b'ABCDEFGH'\n","Key Found:\n","K1 = b'\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01'\n","K2 = b'\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03'\n","K3 = b'\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02'\n","Decrypted = b'ABCDEFGH'\n","Key Found:\n","K1 = b'\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02'\n","K2 = b'\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01'\n","K3 = b'\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03'\n","Decrypted = b'ABCDEFGH'\n","Key Found:\n","K1 = b'\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02'\n","K2 = b'\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03'\n","K3 = b'\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01'\n","Decrypted = b'ABCDEFGH'\n","Key Found:\n","K1 = b'\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03'\n","K2 = b'\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01'\n","K3 = b'\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02'\n","Decrypted = b'ABCDEFGH'\n","Key Found:\n","K1 = b'\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03'\n","K2 = b'\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02'\n","K3 = b'\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01'\n","Decrypted = b'ABCDEFGH'\n"]}]},{"cell_type":"markdown","source":["# Small-Subgroup Attack on ECDH"],"metadata":{"id":"6V0xoPJguycC"}},{"cell_type":"code","source":["def inv(a, p):\n","    return pow(a, p - 2, p)\n","\n","def add(P, Q, a, p):\n","    if P == (None, None): return Q\n","    if Q == (None, None): return P\n","    if P == Q:\n","        l = (3 * P[0]**2 + a) * inv(2 * P[1], p) % p\n","    else:\n","        if P[0] == Q[0]: return (None, None)\n","        l = (Q[1] - P[1]) * inv(Q[0] - P[0], p) % p\n","    x = (l**2 - P[0] - Q[0]) % p\n","    y = (l * (P[0] - x) - P[1]) % p\n","    return (x, y)\n","\n","def mul(k, P, a, p):\n","    R = (None, None)\n","    while k:\n","        if k & 1: R = add(R, P, a, p)\n","        P = add(P, P, a, p)\n","        k >>= 1\n","    return R\n","\n","p = 9739\n","a = 497\n","G = (1804, 5368)\n","n = 43\n","\n","Q = mul(n // 43, G, a, p)\n","B = mul(5, Q, a, p)\n","\n","for i in range(1, 43):\n","    if mul(i, B, a, p) == mul(5, Q, a, p):\n","        print(i)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A0n4rGPivD_1","executionInfo":{"status":"ok","timestamp":1743998087107,"user_tz":-330,"elapsed":21,"user":{"displayName":"Ritesh Reddy","userId":"12161919313614678514"}},"outputId":"ae6f9517-9838-4d88-cb6d-a0e24b8dbe3a"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n"]}]},{"cell_type":"markdown","source":["# Pollard's rho Algorithm"],"metadata":{"id":"Zs2KgxvXu45t"}},{"cell_type":"code","source":["def gcd(a, b):\n","    while b:\n","        a, b = b, a % b\n","    return a\n","\n","def pollards_rho(n):\n","    if n % 2 == 0:\n","        return 2\n","    x = 2\n","    y = 2\n","    d = 1\n","    f = lambda x: (x * x + 1) % n\n","    while d == 1:\n","        x = f(x)\n","        y = f(f(y))\n","        d = gcd(abs(x - y), n)\n","    if d == n:\n","        return None\n","    return d\n","\n","def modinv(a, m):\n","    m0, x0, x1 = m, 0, 1\n","    while a > 1:\n","        q = a // m\n","        a, m = m, a % m\n","        x0, x1 = x1 - q * x0, x0\n","    return x1 % m0\n","\n","def modexp(base, exp, mod):\n","    result = 1\n","    base = base % mod\n","    while exp > 0:\n","        if exp % 2:\n","            result = (result * base) % mod\n","        exp = exp // 2\n","        base = (base * base) % mod\n","    return result\n","\n","p = 61\n","q = 53\n","n = p * q\n","phi = (p - 1) * (q - 1)\n","e = 17\n","d = modinv(e, phi)\n","\n","message = 42\n","cipher = modexp(message, e, n)\n","\n","factor = pollards_rho(n)\n","other_factor = n // factor\n","recovered_phi = (factor - 1) * (other_factor - 1)\n","recovered_d = modinv(e, recovered_phi)\n","decrypted = modexp(cipher, recovered_d, n)\n","\n","print(\"Original Message:\", message)\n","print(\"Encrypted Message:\", cipher)\n","print(\"Decrypted (via attack):\", decrypted)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BdcK81GlvAAd","executionInfo":{"status":"ok","timestamp":1743997503184,"user_tz":-330,"elapsed":9,"user":{"displayName":"Ritesh Reddy","userId":"12161919313614678514"}},"outputId":"e0f8cd30-cca2-4778-bc21-ff976b529104"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Original Message: 42\n","Encrypted Message: 2557\n","Decrypted (via attack): 42\n"]}]}],"metadata":{"colab":{"provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1743948020595}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}